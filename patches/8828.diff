diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/debugging/launch/NbLaunchDelegate.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/debugging/launch/NbLaunchDelegate.java
index a8ca4f2143de..e503da42bd4b 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/debugging/launch/NbLaunchDelegate.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/debugging/launch/NbLaunchDelegate.java
@@ -571,7 +571,7 @@ public void finished(boolean success) {
             mainSource = false;
         } else {
             FileObject fileRoot = sourceCP != null ? sourceCP.findOwnerRoot(toRun) : null;
-            mainSource = fileRoot != null && UnitTestForSourceQuery.findUnitTests(fileRoot).length > 0;
+            mainSource = fileRoot == null || UnitTestForSourceQuery.findSources(fileRoot).length == 0;
         }
         ActionProvider provider = null;
         String command = null;
diff --git a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/debugging/launch/NbLaunchRequestHandler.java b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/debugging/launch/NbLaunchRequestHandler.java
index b1a472ce99a4..5e6242c6e89d 100644
--- a/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/debugging/launch/NbLaunchRequestHandler.java
+++ b/java/java.lsp.server/src/org/netbeans/modules/java/lsp/server/debugging/launch/NbLaunchRequestHandler.java
@@ -32,6 +32,8 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Consumer;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
@@ -70,7 +72,7 @@
  * @author martin
  */
 public final class NbLaunchRequestHandler {
-
+    private static final Logger LOG = Logger.getLogger(NbLaunchRequestHandler.class.getName());
     private NbLaunchDelegate activeLaunchHandler;
 
     public CompletableFuture<Void> launch(Map<String, Object> launchArguments, DebugAdapterContext context) {
@@ -148,7 +150,10 @@ public CompletableFuture<Void> launch(Map<String, Object> launchArguments, Debug
                         case 1:
                             handleSelectedMainClass.accept(mainClasses.get(0));
                             break;
-                        case 2:
+                        default:
+                            if(mainClasses.size() > 10){
+                                LOG.log(Level.WARNING, "The number of main classes is large :{0}", mainClasses.size());
+                            }
                             List<NotifyDescriptor.QuickPick.Item> mainClassItems =
                                     mainClasses.stream()
                                                .map(eh -> new Item(eh.getQualifiedName(), eh.getQualifiedName()))
